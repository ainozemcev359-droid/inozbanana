import os, base64
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update, InputFile
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, filters
import httpx
from io import BytesIO
import tempfile

load_dotenv()
BOT_TOKEN = os.getenv("8163487098:AAFFhU3-qVEsuWCKuoYseC9QGaUM92M_sc0")
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN or not GEMINI_KEY:
    raise RuntimeError("–ó–∞–ø–æ–ª–Ω–∏ TG_BOT_TOKEN –∏ GEMINI_API_KEY –≤ .env")

GEM_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent"
HEADERS = {"Content-Type": "application/json"}

app = FastAPI(title="Banana TG Bot")
tg_app = Application.builder().token(BOT_TOKEN).build()

async def gemini_edit(prompt: str, image_bytes: bytes) -> bytes:
    b64_img = base64.b64encode(image_bytes).decode()
    payload = {
        "contents": [{
            "parts": [
                {"text": (
                    "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. "
                    "–°–æ—Ö—Ä–∞–Ω–∏ —à—Ä–∏—Ñ—Ç, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. "
                    "–ù–µ –∏–∑–º–µ–Ω—è–π –æ—Å—Ç–∞–ª—å–Ω–æ–µ. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: " + prompt
                )},
                {"inline_data": {"mime_type": "image/png", "data": b64_img}}
            ]
        }],
        "generationConfig": {"responseMimeType": "image/png"}
    }
    async with httpx.AsyncClient(timeout=180) as client:
        r = await client.post(f"{GEM_URL}?key={GEMINI_KEY}", headers=HEADERS, json=payload)
        r.raise_for_status()
        data = r.json()
        b64 = data["candidates"][0]["content"]["parts"][0]["inline_data"]["data"]
        return base64.b64decode(b64)

HELP = (
    "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–æ —Å–∫—Ä–∏–Ω–æ–º –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ –∑–∞–º–µ–Ω–∏ 1.45 –Ω–∞ 2.15\n"
    "‚Ä¢ –ø–æ—Å—Ç–∞–≤—å Total = 1580\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –±–æ—Ç –Ω–∞ Nano Banana. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –∏ —è –∏–∑–º–µ–Ω—é —Ü–∏—Ñ—Ä—ã/—Ç–µ–∫—Å—Ç. /help")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP)

async def photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        return
    prompt = (update.message.caption or "").strip()
    if not prompt:
        await update.message.reply_text("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —á—Ç–æ –º–µ–Ω—è—Ç—å.")
        return

    tg_file = await update.message.photo[-1].get_file()
    img_bytes = await tg_file.download_as_bytearray()
    msg = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é‚Ä¶")

    try:
        out_bytes = await gemini_edit(prompt, bytes(img_bytes))
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
            tmp.write(out_bytes)
            tmp_path = tmp.name
        await update.message.reply_photo(photo=InputFile(tmp_path))
    except Exception as e:
        await msg.edit_text(f"–û—à–∏–±–∫–∞: {e}")

def register_handlers(app_):
    app_.add_handler(CommandHandler("start", start))
    app_.add_handler(CommandHandler("help", help_cmd))
    app_.add_handler(MessageHandler(filters.PHOTO, photo_with_caption))

register_handlers(tg_app)

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}
