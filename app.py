import os, base64, tempfile
from io import BytesIO

from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
import httpx

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ Render –±–µ—Ä—É—Ç—Å—è –∏–∑ Environment)
load_dotenv()
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN or not GEMINI_KEY:
    # –ü–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
    missing = [n for n, v in [("TG_BOT_TOKEN", BOT_TOKEN), ("GEMINI_API_KEY", GEMINI_KEY)] if not v]
    raise RuntimeError(f"Missing env: {', '.join(missing)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç Gemini (Nano Banana)
GEM_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent"
HEADERS = {"Content-Type": "application/json"}

# --- FastAPI + PTB setup ---
app = FastAPI(title="Banana TG Bot")
tg_app = Application.builder().token(BOT_TOKEN).build()

HELP_TEXT = (
    "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ –∑–∞–º–µ–Ω–∏ 1.45 –Ω–∞ 2.15\n"
    "‚Ä¢ –ø–æ—Å—Ç–∞–≤—å Total = 1580\n"
    "‚Ä¢ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.35 ‚Üí 2.95\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
    "/help ‚Äî –ø–æ–º–æ—â—å"
)

async def gemini_edit(prompt: str, image_bytes: bytes) -> bytes:
    """
    –°–≤–æ–±–æ–¥–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –º–∞—Å–æ–∫: —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
    –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–ª—å/—Ü–≤–µ—Ç/–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ.
    """
    b64_img = base64.b64encode(image_bytes).decode()
    payload = {
        "contents": [{
            "parts": [
                {"text": (
                    "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. "
                    "–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: —à—Ä–∏—Ñ—Ç, –∫–µ–≥–ª—å, —Ü–≤–µ—Ç, —Ç—Ä–µ–∫–∏–Ω–≥, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ. "
                    "–ù–µ –∏–∑–º–µ–Ω—è–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: " + prompt
                )},
                {"inline_data": {"mime_type": "image/png", "data": b64_img}}
            ]
        }],
        "generationConfig": {"responseMimeType": "image/png"}
    }
    async with httpx.AsyncClient(timeout=180) as client:
        r = await client.post(f"{GEM_URL}?key={GEMINI_KEY}", headers=HEADERS, json=payload)
        r.raise_for_status()
        data = r.json()
        # –î–æ—Å—Ç–∞—ë–º base64 —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞
        b64 = data["candidates"][0]["content"]["parts"][0]["inline_data"]["data"]
        return base64.b64decode(b64)

# ---------- Telegram handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –±–æ—Ç –Ω–∞ Nano Banana. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî –∏ —è –∏–∑–º–µ–Ω—é —Ü–∏—Ñ—Ä—ã/—Ç–µ–∫—Å—Ç.\n\n" + HELP_TEXT
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    if not update.message or not update.message.photo:
        return
    prompt = (update.message.caption or "").strip()
    if not prompt:
        await update.message.reply_text("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —á—Ç–æ –º–µ–Ω—è—Ç—å.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ Telegram
    tg_file = await update.message.photo[-1].get_file()
    img_bytes = await tg_file.download_as_bytearray()

    # –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å
    msg = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é‚Ä¶")

    try:
        out_bytes = await gemini_edit(prompt, bytes(img_bytes))
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
            tmp.write(out_bytes)
            tmp_path = tmp.name
        await update.message.reply_photo(photo=InputFile(tmp_path))
    except Exception as e:
        # –ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–µ—Ç–∞–ª–∏ —Å–º–æ—Ç—Ä–∏ –≤ Render ‚Üí Logs)
        await msg.edit_text(f"–û—à–∏–±–∫–∞: {e}")

def register_handlers(app_):
    app_.add_handler(CommandHandler("start", start))
    app_.add_handler(CommandHandler("help", help_cmd))
    app_.add_handler(MessageHandler(filters.PHOTO, photo_with_caption))

register_handlers(tg_app)

# ---------- Lifecycle: –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ PTB –≤–Ω—É—Ç—Ä–∏ FastAPI ----------
@app.on_event("startup")
async def _startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram Application
    await tg_app.initialize()
    await tg_app.start()

@app.on_event("shutdown")
async def _shutdown():
    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await tg_app.stop()
    await tg_app.shutdown()

# ---------- –ú–∞—Ä—à—Ä—É—Ç—ã FastAPI ----------
@app.get("/")
def root():
    # Health-check, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å 200 OK –Ω–∞ –∫–æ—Ä–Ω–µ
    return {"ok": True, "status": "running"}

@app.post("/webhook")
async def webhook(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –∞–ø–¥–µ–π—Ç –æ—Ç Telegram
    data = await request.json()
    # –ù–µ–±–æ–ª—å—à–æ–π –ª–æ–≥ –≤ Render ‚Üí Logs (–Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try:
        print("WEBHOOK UPDATE:", data.get("update_id"), data.get("message", {}).get("text"))
    except Exception:
        pass
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Update –∏ –æ—Ç–¥–∞—ë–º PTB
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}
